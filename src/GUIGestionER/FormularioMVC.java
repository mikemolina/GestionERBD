/*
 * Copyright (C) 2021 Miguel Molina
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package GUIGestionER;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import libGestionER.Persona;
import libGestionER.DNI;
import libGestionER.Genero;
import libGestionER.EstadoCivil;
import libGestionER.Ciudad;
import libGestionER.Empresa;
import libGestionER.Contacto;
import libGestionER.Empleado;
import libGestionER.TipoRef;
import libGestionER.Referencia;
import libGestionER.GestionEmpRef;

import CTRLGestionER.controlGER;


/**
 * Clase FormularioMVC.
 * Clase con la interfaz gráfica de usuario (GUI) para la gestión de información
 * de vinculación entre un Empleado y la Referencia, con métodos específicos de
 * estilo CRUD para gestionar y almacenar la información en una base de datos.
 * El desarrollo de la interfaz gráfica, fue realizado con el IDE NetBeans.
 * @author Miguel Molina
 */
public class FormularioMVC extends javax.swing.JFrame {
    
    // Lista de almacenamiento
    DefaultTableModel VinculacionTM = new DefaultTableModel();
    
    // Clase Controlador
    controlGER Controlador = new controlGER();
    
    /**
     * Crea nuevo formulario FormularioMVC
     */
    public FormularioMVC() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        TXTPrimNomEmpl = new javax.swing.JTextField();
        TXTSecNomEmpl = new javax.swing.JTextField();
        TXTPrimApellEmpl = new javax.swing.JTextField();
        TXTSecApellEmpl = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        TXTDireccionEmpl = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        CMBTipoDoc = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        TXTNumDoc = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        TXTCiudadEmpl = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        CMBEstCivil = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        CMBSexo = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        TXTNumTelEmpl = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        CMBTipoTelEmpl = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        TXTNomEmpresa = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        TXTNITEmpr = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        TXTCiudadEmpr = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        TXTFechaNac = new javax.swing.JTextField();
        BTNGuardarEmpl = new javax.swing.JButton();
        BTNActualizarEmpl = new javax.swing.JButton();
        BTNBuscarEmpl = new javax.swing.JButton();
        BTNBorrarEmpl = new javax.swing.JButton();
        jLabel35 = new javax.swing.JLabel();
        TXTEmailEmpl = new javax.swing.JTextField();
        BTNLimpiarEmpl = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        TXTPrimNomRef = new javax.swing.JTextField();
        TXTSecNomRef = new javax.swing.JTextField();
        TXTPrimApellRef = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        TXTSecApellRef = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        TXTDireccionRef = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        TXTCiudadRef = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        CMBTipoTelRef = new javax.swing.JComboBox<>();
        jLabel31 = new javax.swing.JLabel();
        TXTNumTelRef = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        CMBTipRef = new javax.swing.JComboBox<>();
        jLabel34 = new javax.swing.JLabel();
        TXTEmailRef = new javax.swing.JTextField();
        BTNGuardarRef = new javax.swing.JButton();
        BTNActualizarRef = new javax.swing.JButton();
        BTNBuscarRef = new javax.swing.JButton();
        BTNBorrarRef = new javax.swing.JButton();
        BTNLimpiarRef = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        TXTGEREmpNumDoc = new javax.swing.JTextField();
        TXTGERRefEmail = new javax.swing.JTextField();
        BTNGERBuscar = new javax.swing.JButton();
        BTNGERVincular = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        TBLVinculacion = new javax.swing.JTable();
        BTNGEREliminar = new javax.swing.JButton();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        siGER = new javax.swing.JCheckBox();
        noGER = new javax.swing.JCheckBox();
        BTNGERLimpiar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gestion de datos Empleado - Referencia");
        setForeground(new java.awt.Color(153, 153, 255));
        setPreferredSize(new java.awt.Dimension(800, 650));
        setResizable(false);

        jTabbedPane1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jTabbedPane1.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(750, 550));

        jPanel1.setPreferredSize(new java.awt.Dimension(750, 550));

        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 1, 16)); // NOI18N
        jLabel1.setText("Datos básicos");
        jLabel1.setToolTipText("Identifcación y ubicación del Empleado");

        jLabel2.setText("Primer nombre");

        jLabel3.setText("Segundo nombre");

        jLabel4.setText("Primer apellido");

        jLabel5.setText("Segundo apellido");

        TXTPrimNomEmpl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTPrimNomEmplActionPerformed(evt);
            }
        });

        TXTSecNomEmpl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTSecNomEmplActionPerformed(evt);
            }
        });

        jLabel6.setText("Dirección");
        jLabel6.setToolTipText("Ubicación del domicilio");

        TXTDireccionEmpl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTDireccionEmplActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("DejaVu Sans", 1, 16)); // NOI18N
        jLabel7.setText("Documento de identificación");
        jLabel7.setToolTipText("Información del documento de identidad");

        jLabel8.setText("Tipo de documento");

        CMBTipoDoc.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cedula de ciudadanía", "Cedula de extranjería", "Pasaporte" }));

        jLabel9.setBackground(new java.awt.Color(255, 0, 255));
        jLabel9.setForeground(new java.awt.Color(0, 0, 0));
        jLabel9.setText("Número documento");
        jLabel9.setOpaque(true);

        TXTNumDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTNumDocActionPerformed(evt);
            }
        });

        jLabel10.setText("Ciudad");

        TXTCiudadEmpl.setToolTipText("Ciudad de domicilio");

        jLabel11.setFont(new java.awt.Font("DejaVu Sans", 1, 16)); // NOI18N
        jLabel11.setText("Características personales");
        jLabel11.setToolTipText("Situación jurídica y atributos fisiológicos");

        jLabel12.setText("Estado civil");

        CMBEstCivil.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Soltero", "Casado", "Unión libre", "Separado", "Viudo" }));

        jLabel13.setText("Sexo");

        CMBSexo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Femenino", "Masculino", "Intersexo" }));

        jLabel14.setFont(new java.awt.Font("DejaVu Sans", 1, 16)); // NOI18N
        jLabel14.setText("Contacto");
        jLabel14.setToolTipText("Medios de comunicación inmediata");

        TXTNumTelEmpl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTNumTelEmplActionPerformed(evt);
            }
        });

        jLabel15.setText("Tipo de dispositivo");

        CMBTipoTelEmpl.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Celular", "Fijo", "Fax" }));

        jLabel16.setText("Número telefónico");

        jLabel17.setFont(new java.awt.Font("DejaVu Sans", 1, 16)); // NOI18N
        jLabel17.setText("Información de la Empresa");
        jLabel17.setToolTipText("Datos básicos de la compañia");

        jLabel18.setText("Nombre");

        jLabel19.setText("Identificación tributaria");

        jLabel20.setText("Ciudad");

        jLabel21.setText("Fecha nacimiento");
        jLabel21.setToolTipText("Ingresar fecha en formato YYYY-MM-DD");

        BTNGuardarEmpl.setText("Guardar");
        BTNGuardarEmpl.setToolTipText("Almacena la información del empleado");
        BTNGuardarEmpl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNGuardarEmplActionPerformed(evt);
            }
        });

        BTNActualizarEmpl.setText("Actualizar");
        BTNActualizarEmpl.setToolTipText("Modificar información del empleado. Buscar por número de documento.");
        BTNActualizarEmpl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNActualizarEmplActionPerformed(evt);
            }
        });

        BTNBuscarEmpl.setText("Buscar");
        BTNBuscarEmpl.setToolTipText("Buscar un empleado. Ingresar número de documento.");
        BTNBuscarEmpl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNBuscarEmplActionPerformed(evt);
            }
        });

        BTNBorrarEmpl.setText("Eliminar");
        BTNBorrarEmpl.setToolTipText("Elimina información del empleado. Buscar por número de documento.");
        BTNBorrarEmpl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNBorrarEmplActionPerformed(evt);
            }
        });

        jLabel35.setText("Correo electrónico");

        BTNLimpiarEmpl.setText("Limpiar");
        BTNLimpiarEmpl.setToolTipText("Este botón sólo limpia los campos mostrados. No elimina información almacenada.");
        BTNLimpiarEmpl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNLimpiarEmplActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(BTNGuardarEmpl, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BTNBuscarEmpl, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BTNActualizarEmpl, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BTNBorrarEmpl, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BTNLimpiarEmpl, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(CMBTipoDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel12)
                                            .addComponent(jLabel15))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(CMBEstCivil, 0, 187, Short.MAX_VALUE)
                                            .addComponent(CMBTipoTelEmpl, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(31, 31, 31)
                                        .addComponent(jLabel16)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(TXTNumTelEmpl, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(31, 31, 31)
                                                .addComponent(jLabel13)
                                                .addGap(111, 111, 111))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel9)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(CMBSexo, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(TXTNumDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addComponent(jLabel1)
                            .addComponent(jLabel7)
                            .addComponent(jLabel11)
                            .addComponent(jLabel14)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel10))
                                .addGap(29, 29, 29)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(TXTPrimApellEmpl, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                                            .addComponent(TXTPrimNomEmpl))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel5)
                                                .addGap(13, 13, 13)))
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(TXTSecApellEmpl, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                                            .addComponent(TXTSecNomEmpl)))
                                    .addComponent(TXTDireccionEmpl)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(TXTCiudadEmpl, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel21)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(TXTFechaNac, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel18)
                                    .addComponent(jLabel20))
                                .addGap(75, 75, 75)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(TXTCiudadEmpr, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                                    .addComponent(TXTNomEmpresa))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel19)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TXTNITEmpr, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel35)
                            .addGap(18, 18, 18)
                            .addComponent(TXTEmailEmpl))))
                .addGap(30, 30, 30))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(TXTSecNomEmpl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(TXTPrimNomEmpl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TXTPrimApellEmpl, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(TXTSecApellEmpl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(TXTDireccionEmpl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TXTCiudadEmpl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel21)
                    .addComponent(TXTFechaNac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(CMBTipoDoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(TXTNumDoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CMBEstCivil, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(CMBSexo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TXTNumTelEmpl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(CMBTipoTelEmpl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TXTEmailEmpl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel35))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TXTNomEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)
                    .addComponent(jLabel19)
                    .addComponent(TXTNITEmpr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(TXTCiudadEmpr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BTNGuardarEmpl)
                    .addComponent(BTNBorrarEmpl)
                    .addComponent(BTNBuscarEmpl)
                    .addComponent(BTNLimpiarEmpl)
                    .addComponent(BTNActualizarEmpl))
                .addGap(25, 25, 25))
        );

        jTabbedPane1.addTab("Información Empleado", jPanel1);

        jPanel2.setPreferredSize(new java.awt.Dimension(760, 550));

        jLabel22.setFont(new java.awt.Font("DejaVu Sans", 1, 16)); // NOI18N
        jLabel22.setText("Datos básicos");
        jLabel22.setToolTipText("Identifcación y ubicación de la Referencia");

        jLabel23.setText("Primer nombre");

        TXTPrimNomRef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTPrimNomRefActionPerformed(evt);
            }
        });

        TXTSecNomRef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTSecNomRefActionPerformed(evt);
            }
        });

        jLabel24.setText("Segundo nombre");

        jLabel25.setText("Segundo apellido");

        jLabel26.setText("Primer apellido");

        jLabel27.setText("Dirección");
        jLabel27.setToolTipText("Ubicación del domicilio");

        TXTDireccionRef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTDireccionRefActionPerformed(evt);
            }
        });

        jLabel28.setText("Ciudad");

        TXTCiudadRef.setToolTipText("Ciudad de domicilio");
        TXTCiudadRef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTCiudadRefActionPerformed(evt);
            }
        });

        jLabel29.setFont(new java.awt.Font("DejaVu Sans", 1, 16)); // NOI18N
        jLabel29.setText("Contacto");
        jLabel29.setToolTipText("Medios de comunicación inmediata");

        jLabel30.setText("Tipo de dispositivo");

        CMBTipoTelRef.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Celular", "Fijo", "Fax" }));

        jLabel31.setText("Número telefónico");

        TXTNumTelRef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTNumTelRefActionPerformed(evt);
            }
        });

        jLabel32.setFont(new java.awt.Font("DejaVu Sans", 1, 16)); // NOI18N
        jLabel32.setText("Tipo referencia");
        jLabel32.setToolTipText("Carácter de la carta de referencia");

        jLabel33.setText("Recomendación");

        CMBTipRef.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Personal", "Laboral" }));

        jLabel34.setBackground(new java.awt.Color(255, 0, 255));
        jLabel34.setText("Correo electrónico");
        jLabel34.setOpaque(true);

        BTNGuardarRef.setText("Guardar");
        BTNGuardarRef.setToolTipText("Almacena información de la referencia");
        BTNGuardarRef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNGuardarRefActionPerformed(evt);
            }
        });

        BTNActualizarRef.setText("Actualizar");
        BTNActualizarRef.setToolTipText("Modificar información de la referencia. Buscar por correo electrónico.");
        BTNActualizarRef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNActualizarRefActionPerformed(evt);
            }
        });

        BTNBuscarRef.setText("Buscar");
        BTNBuscarRef.setToolTipText("Buscar una referencia. Ingresar correo electrónico.");
        BTNBuscarRef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNBuscarRefActionPerformed(evt);
            }
        });

        BTNBorrarRef.setText("Eliminar");
        BTNBorrarRef.setToolTipText("Elimina información de la referencia. Buscar por correo electrónico.");
        BTNBorrarRef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNBorrarRefActionPerformed(evt);
            }
        });

        BTNLimpiarRef.setText("Limpiar");
        BTNLimpiarRef.setToolTipText("Este botón sólo limpia los campos mostrados. No elimina información almacenada.");
        BTNLimpiarRef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNLimpiarRefActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel28)
                                .addGap(72, 72, 72)
                                .addComponent(TXTCiudadRef))
                            .addComponent(jLabel29)
                            .addComponent(jLabel22)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel30)
                                    .addComponent(jLabel34))
                                .addGap(44, 44, 44)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(CMBTipoTelRef, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel31)
                                        .addGap(12, 12, 12)
                                        .addComponent(TXTNumTelRef, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(TXTEmailRef)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel32)
                                    .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(39, 39, 39)
                                .addComponent(CMBTipRef, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(BTNGuardarRef, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(BTNBuscarRef, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(BTNActualizarRef, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(BTNBorrarRef, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(BTNLimpiarRef, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(43, 43, 43))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel27)
                                .addGap(55, 55, 55)
                                .addComponent(TXTDireccionRef))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel23)
                                        .addGap(18, 18, 18)
                                        .addComponent(TXTPrimNomRef))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel26)
                                        .addGap(19, 19, 19)
                                        .addComponent(TXTPrimApellRef)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel24)
                                    .addComponent(jLabel25))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(TXTSecNomRef, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                                    .addComponent(TXTSecApellRef))))
                        .addGap(45, 45, 45))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(jLabel22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(TXTSecNomRef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TXTPrimNomRef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(TXTPrimApellRef, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel25)
                        .addComponent(TXTSecApellRef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel26))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(TXTDireccionRef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(TXTCiudadRef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addComponent(jLabel29)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel30)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(TXTNumTelRef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(CMBTipoTelRef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel31)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TXTEmailRef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel34))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 124, Short.MAX_VALUE)
                .addComponent(jLabel32)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel33)
                    .addComponent(CMBTipRef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BTNGuardarRef)
                    .addComponent(BTNActualizarRef)
                    .addComponent(BTNBuscarRef)
                    .addComponent(BTNBorrarRef)
                    .addComponent(BTNLimpiarRef))
                .addGap(25, 25, 25))
        );

        jTabbedPane1.addTab("Información Referencia", jPanel2);

        jPanel3.setPreferredSize(new java.awt.Dimension(760, 550));

        jLabel36.setFont(new java.awt.Font("DejaVu Sans", 1, 16)); // NOI18N
        jLabel36.setText("Búsqueda de Empleado y Referencia");
        jLabel36.setToolTipText("Aquí puede encontrar el empleado, su referencia y el estado de su vinculación");

        jLabel37.setText("Número de documento Empleado");

        jLabel38.setText("Correo electrónico Referencia");

        TXTGEREmpNumDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTGEREmpNumDocActionPerformed(evt);
            }
        });

        BTNGERBuscar.setText("Buscar Empleado y Referencia");
        BTNGERBuscar.setToolTipText("Busca la vinculación entre un empleado y su referencia");
        BTNGERBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNGERBuscarActionPerformed(evt);
            }
        });

        BTNGERVincular.setText("Vincular Empleado y Referencia");
        BTNGERVincular.setToolTipText("Guarda la vinculación entre un empleado y una referencia");
        BTNGERVincular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNGERVincularActionPerformed(evt);
            }
        });

        TBLVinculacion.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        TBLVinculacion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Dato", "Valor"
            }
        ));
        TBLVinculacion.setToolTipText("");
        jScrollPane3.setViewportView(TBLVinculacion);

        BTNGEREliminar.setText("Eliminar vinculación");
        BTNGEREliminar.setToolTipText("Elimina información de la vinculación");
        BTNGEREliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNGEREliminarActionPerformed(evt);
            }
        });

        jLabel39.setFont(new java.awt.Font("DejaVu Sans", 1, 16)); // NOI18N
        jLabel39.setText("Información de la vinculación");
        jLabel39.setToolTipText("Muestra resumen de la vinculación");

        jLabel40.setText("Estado de la vinculación");
        jLabel40.setToolTipText("Verificación si empleado y referencia están vinculados");

        siGER.setText("Si están vinculados");
        siGER.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siGERActionPerformed(evt);
            }
        });

        noGER.setText("No están vinculados");

        BTNGERLimpiar.setText("Limpiar");
        BTNGERLimpiar.setToolTipText("Este botón sólo limpia los campos mostrados. No elimina información almacenada.");
        BTNGERLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNGERLimpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel39)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel36)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel37, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 218, Short.MAX_VALUE)
                                        .addComponent(jLabel40)
                                        .addComponent(jLabel38))
                                    .addComponent(BTNGERBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(BTNGERLimpiar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(TXTGERRefEmail)
                                    .addComponent(TXTGEREmpNumDoc)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(siGER)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                                        .addComponent(noGER)
                                        .addGap(45, 45, 45))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(BTNGEREliminar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(BTNGERVincular, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE))
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addComponent(jScrollPane3))
                        .addGap(50, 50, 50))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel36)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37)
                    .addComponent(TXTGEREmpNumDoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel38)
                    .addComponent(TXTGERRefEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel40)
                    .addComponent(siGER)
                    .addComponent(noGER))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BTNGERBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BTNGERVincular, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BTNGERLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BTNGEREliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(65, 65, 65)
                .addComponent(jLabel39)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(144, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Vínculo Empleado Referencia", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 669, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

   
    /**
     * Función Limpiar (clean) campos de texto del Empleado
     * @param evt Evento del botón Limpiar
     */
    private void BTNLimpiarEmplActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNLimpiarEmplActionPerformed
        this.LimpiarCamposEmpl();
    }//GEN-LAST:event_BTNLimpiarEmplActionPerformed

    /**
     * Función Borrar (delete) registro de Empleado
     * @param evt Evento del botón Eliminar
     */
    private void BTNBorrarEmplActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNBorrarEmplActionPerformed
        String NumDoc = TXTNumDoc.getText();
        // Verificar el numero de documento
        if( NumDoc.equals("") ){
            JOptionPane.showMessageDialog(this,
                    "Primero realize la búsqueda con el número de documento",
                    "Eliminación empleado", JOptionPane.WARNING_MESSAGE);
        } else {
            Empleado emplSupr = new Empleado();
            emplSupr = Empleado.class.cast( Controlador.BuscarGER(emplSupr, NumDoc, "") );
            if( emplSupr != null ) {
                int Confirmar = JOptionPane.showConfirmDialog(this,
                        "Encontrado empleado para el número de documento ingresado.\n" +
                        "Desea eliminar la información?",
                        "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
                // Inicio control
                if( Confirmar == 0 ) {                    
                    boolean borrarDato = Controlador.BorrarGER(emplSupr);
                    if( borrarDato ) {
                        this.LimpiarCamposEmpl();
                        JOptionPane.showMessageDialog(this,
                                "La información del empleado fue eliminada",
                                "Eliminación empleado", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this,
                                "La información del empleado NO fue eliminada",
                                "Fallo eliminación empleado", JOptionPane.WARNING_MESSAGE);
                    }                    
                }
                // Fin control
            } else {
                JOptionPane.showMessageDialog(this,
                        "No existe información con el número de documento ingresado",
                        "Eliminación empleado", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_BTNBorrarEmplActionPerformed

    /**
     * Función Buscar (read) registro de Empleado
     * @param evt Evento del botón Buscar
     */
    private void BTNBuscarEmplActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNBuscarEmplActionPerformed
        String NumDoc = TXTNumDoc.getText();
        if( NumDoc.equals("") ) {
            JOptionPane.showMessageDialog(this,
                    "Por favor ingrese el número de documento del empleado",
                    "Búsqueda empleado", JOptionPane.WARNING_MESSAGE);        
        } else {
            // Inicio control
            Empleado empleado = new Empleado();
            empleado = Empleado.class.cast( Controlador.BuscarGER(empleado, NumDoc, "") );
            // Fin control
            if( empleado != null ) {
                JOptionPane.showMessageDialog(this,
                        "Encontrada coincidencia para el número de documento ingresado",
                        "Búsqueda empleado", JOptionPane.INFORMATION_MESSAGE);
                TXTPrimNomEmpl.setText(empleado.getPersona_emp().getPrimernom());
                TXTSecNomEmpl.setText(empleado.getPersona_emp().getSegundonom());
                TXTPrimApellEmpl.setText(empleado.getPersona_emp().getPrimerapell());
                TXTSecApellEmpl.setText(empleado.getPersona_emp().getSegundoapell());
                TXTDireccionEmpl.setText(empleado.getPersona_emp().getDireccion());
                TXTCiudadEmpl.setText(empleado.getCiudad_emp().getNombre());
                TXTFechaNac.setText(empleado.getDatanac());
                CMBTipoDoc.setSelectedItem(empleado.getDni_emp().getTipodoc());
                TXTNumDoc.setText(empleado.getDni_emp().getNumident());
                CMBEstCivil.setSelectedItem(empleado.getEstciv_emp().getTipo());
                CMBSexo.setSelectedItem(empleado.getGenero_emp().getSexo());
                CMBTipoTelEmpl.setSelectedItem(empleado.getContacto_emp().getTipotel());
                TXTNumTelEmpl.setText(empleado.getContacto_emp().getNumtel());
                TXTEmailEmpl.setText(empleado.getContacto_emp().getEmail());
                TXTNomEmpresa.setText(empleado.getEmpresa_emp().getNomempr());
                TXTNITEmpr.setText(empleado.getEmpresa_emp().getIdenttrib());
                TXTCiudadEmpr.setText(empleado.getEmpresa_emp().getCiudad_empr().getNombre());
            } else {
                JOptionPane.showMessageDialog(this,
                        "No existe coincidencia con el número de documento ingresado",
                        "Búsqueda empleado", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_BTNBuscarEmplActionPerformed

    /**
     * Función Actualizar (update) registro de Empleado
     * @param evt Evento del botón Actualizar
     */
    private void BTNActualizarEmplActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNActualizarEmplActionPerformed
        String NumDoc = TXTNumDoc.getText();
        String PrimNomEmpl = TXTPrimNomEmpl.getText();
        String SecNomEmpl = TXTSecNomEmpl.getText();
        String PrimApellEmpl = TXTPrimApellEmpl.getText();
        String SecApellEmpl = TXTSecApellEmpl.getText();
        String DireccionEmpl = TXTDireccionEmpl.getText();
        String CiudadEmpl = TXTCiudadEmpl.getText();
        String FechaNac = TXTFechaNac.getText();
        String TipoDoc = CMBTipoDoc.getSelectedItem().toString();
        String EstCivil = CMBEstCivil.getSelectedItem().toString();
        String Sexo = CMBSexo.getSelectedItem().toString();
        String TipoTelEmpl = CMBTipoTelEmpl.getSelectedItem().toString();
        String NumTelEmpl = TXTNumTelEmpl.getText();
        String EmailEmpl = TXTEmailEmpl.getText();
        String NomEmpresa = TXTNomEmpresa.getText();
        String NITEmpr = TXTNITEmpr.getText();
        String CiudadEmpr = TXTCiudadEmpr.getText();
        // Verificar los campos llenos
        if( PrimNomEmpl.equals("") || SecNomEmpl.equals("") || PrimApellEmpl.equals("") || SecApellEmpl.equals("") ||
            DireccionEmpl.equals("") || CiudadEmpl.equals("") || FechaNac.equals("") || NumDoc.equals("") ||
            NumTelEmpl.equals("") || EmailEmpl.equals("") || NomEmpresa.equals("") || NITEmpr.equals("") ||
            CiudadEmpr.equals("") ){
            JOptionPane.showMessageDialog(this,
                                          "Todos los campos deben estar completos.\n" +
                                          "Primero realize la búsqueda con el número de documento.",
                                          "Actualización empleado", JOptionPane.WARNING_MESSAGE);
        } else if( FechaNac.matches("\\d{4}-\\d{2}-\\d{2}") == false ){
            JOptionPane.showMessageDialog(this,
                                          "Formato de fecha debe ser YYYY-MM-DD",
                                          "Campo de fecha invalido", JOptionPane.WARNING_MESSAGE);
        } else {
            // Actualizacion del empleado
            int Confirmar = JOptionPane.showConfirmDialog(this,
                    "Desea actualizar la información?",
                    "Confirmar actualización", JOptionPane.YES_NO_OPTION);
            if( Confirmar == 0 ) {
                Persona PersonaEmplUpd = new Persona();
                PersonaEmplUpd.setPrimernom(PrimNomEmpl);
                PersonaEmplUpd.setSegundonom(SecNomEmpl);
                PersonaEmplUpd.setPrimerapell(PrimApellEmpl);
                PersonaEmplUpd.setSegundoapell(SecApellEmpl);
                PersonaEmplUpd.setDireccion(DireccionEmpl);
                Ciudad CiudadEmplUpd = new Ciudad();
                CiudadEmplUpd.setNombre(CiudadEmpl);
                DNI DNIEmplUpd = new DNI();
                DNIEmplUpd.setTipodoc(TipoDoc);
                DNIEmplUpd.setNumident(NumDoc);
                EstadoCivil EstCivEmplUpd = new EstadoCivil();
                EstCivEmplUpd.setTipo(EstCivil);
                Genero GenEmplUpd = new Genero();
                GenEmplUpd.setSexo(Sexo);
                Contacto ContEmplUpd = new Contacto();
                ContEmplUpd.setTipotel(TipoTelEmpl);
                ContEmplUpd.setNumtel(NumTelEmpl);
                ContEmplUpd.setEmail(EmailEmpl);
                Ciudad CiudadEmprUpd = new Ciudad();
                CiudadEmprUpd.setNombre(CiudadEmpr);
                Empresa EmprEmplUpd = new Empresa(NomEmpresa, NITEmpr, CiudadEmprUpd);
                Empleado EmpleadoUpd = new Empleado();
                EmpleadoUpd.setDatanac(FechaNac);
                EmpleadoUpd.setPersona_emp(PersonaEmplUpd);
                EmpleadoUpd.setDni_emp(DNIEmplUpd);
                EmpleadoUpd.setGenero_emp(GenEmplUpd);
                EmpleadoUpd.setEstciv_emp(EstCivEmplUpd);
                EmpleadoUpd.setCiudad_emp(CiudadEmplUpd);
                EmpleadoUpd.setEmpresa_emp(EmprEmplUpd);
                EmpleadoUpd.setContacto_emp(ContEmplUpd);
                // Inicio control
                boolean actualizarDato = Controlador.ActualizarGER(EmpleadoUpd);
                if( actualizarDato ) {
                    this.LimpiarCamposEmpl();
                    JOptionPane.showMessageDialog(this,
                            "El registro fue actualizado exitosamente",
                            "Actualización empleado", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this,
                            "El registro NO fue actualizado",
                            "Fallo actualización empleado", JOptionPane.WARNING_MESSAGE);
                }
                // Fin control
            }
        }
    }//GEN-LAST:event_BTNActualizarEmplActionPerformed

    /**
     * Función Guardar (create) registro del Empleado
     * @param evt Evento del botón Guardar
     */
    private void BTNGuardarEmplActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNGuardarEmplActionPerformed
        String PrimNomEmpl = TXTPrimNomEmpl.getText();
        String SecNomEmpl = TXTSecNomEmpl.getText();
        String PrimApellEmpl = TXTPrimApellEmpl.getText();
        String SecApellEmpl = TXTSecApellEmpl.getText();
        String DireccionEmpl = TXTDireccionEmpl.getText();
        String CiudadEmpl = TXTCiudadEmpl.getText();
        String FechaNac = TXTFechaNac.getText();
        String TipoDoc = CMBTipoDoc.getSelectedItem().toString();
        String NumDoc = TXTNumDoc.getText();
        String EstCivil = CMBEstCivil.getSelectedItem().toString();
        String Sexo = CMBSexo.getSelectedItem().toString();
        String TipoTelEmpl = CMBTipoTelEmpl.getSelectedItem().toString();
        String NumTelEmpl = TXTNumTelEmpl.getText();
        String EmailEmpl = TXTEmailEmpl.getText();
        String NomEmpresa = TXTNomEmpresa.getText();
        String NITEmpr = TXTNITEmpr.getText();
        String CiudadEmpr = TXTCiudadEmpr.getText();
        // Verificar los campos llenos
        if( PrimNomEmpl.equals("") || SecNomEmpl.equals("") || PrimApellEmpl.equals("") || SecApellEmpl.equals("") || 
            DireccionEmpl.equals("") || CiudadEmpl.equals("") || FechaNac.equals("") || NumDoc.equals("") ||
            NumTelEmpl.equals("") || EmailEmpl.equals("") || NomEmpresa.equals("") || NITEmpr.equals("") || 
            CiudadEmpr.equals("") ){
            JOptionPane.showMessageDialog(this, 
                                          "Todos los campos deben estar completos",
                                          "Guardar empleado", JOptionPane.WARNING_MESSAGE);
        } else if( FechaNac.matches("\\d{4}-\\d{2}-\\d{2}") == false ){
            JOptionPane.showMessageDialog(this,
                                          "Formato de fecha debe ser YYYY-MM-DD",
                                          "Campo de fecha invalido", JOptionPane.WARNING_MESSAGE);
        } else {
            Persona PersonaEmplGUI = new Persona(PrimNomEmpl,SecNomEmpl,PrimApellEmpl,SecApellEmpl,DireccionEmpl);
            Ciudad CiudadEmplGUI =new Ciudad(CiudadEmpl);
            DNI DNIEmplGUI = new DNI(TipoDoc, NumDoc);
            EstadoCivil EstCivilEmplGUI = new EstadoCivil(EstCivil);
            Genero GenEmplGUI = new Genero(Sexo);
            Contacto ContEmplGUI = new Contacto(TipoTelEmpl, NumTelEmpl, EmailEmpl);
            Ciudad CiudadEmprGUI = new Ciudad(CiudadEmpr);
            Empresa EmpresaGUI = new Empresa(NomEmpresa, NITEmpr, CiudadEmprGUI);
            Empleado EmpleadoGUI = new Empleado(FechaNac, PersonaEmplGUI, DNIEmplGUI, GenEmplGUI, EstCivilEmplGUI,
                                                CiudadEmplGUI, EmpresaGUI, ContEmplGUI);
            // Inicio control
            boolean crearDato = Controlador.CrearGER(EmpleadoGUI);
            if( crearDato ) {
                JOptionPane.showMessageDialog(this,
                        "El registro fue exitoso",
                        "Confirmación", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this,
                        "El registro NO fue guardado",
                        "Confirmación", JOptionPane.WARNING_MESSAGE);
            }
            this.LimpiarCamposEmpl();
            // Fin control            
        }
    }//GEN-LAST:event_BTNGuardarEmplActionPerformed

    private void TXTNumTelEmplActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTNumTelEmplActionPerformed
        
    }//GEN-LAST:event_TXTNumTelEmplActionPerformed

    private void TXTNumDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTNumDocActionPerformed
        
    }//GEN-LAST:event_TXTNumDocActionPerformed

    private void TXTDireccionEmplActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTDireccionEmplActionPerformed
        
    }//GEN-LAST:event_TXTDireccionEmplActionPerformed

    private void TXTSecNomEmplActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTSecNomEmplActionPerformed
        
    }//GEN-LAST:event_TXTSecNomEmplActionPerformed

    private void TXTPrimNomEmplActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTPrimNomEmplActionPerformed
        
    }//GEN-LAST:event_TXTPrimNomEmplActionPerformed

    /**
     * Función Limpiar (clean) campos de texto de la Referencia
     * @param evt Evento del botón Limpiar
     */
    private void BTNLimpiarRefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNLimpiarRefActionPerformed
        this.LimpiarCamposRef();
    }//GEN-LAST:event_BTNLimpiarRefActionPerformed

    /**
     * Funcion Borrar (delete) registro de la Referencia
     * @param evt Evento del botón Eliminar
     */
    private void BTNBorrarRefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNBorrarRefActionPerformed
        String correo = TXTEmailRef.getText();
        // Verificar el correo electronico
        if( correo.equals("") ){
            JOptionPane.showMessageDialog(this,
                    "Primero realize la búsqueda con el correo electrónico",
                    "Eliminación referencia", JOptionPane.WARNING_MESSAGE);
        } else {
            Referencia refSupr = new Referencia();
            refSupr = Referencia.class.cast( Controlador.BuscarGER(refSupr, "", correo) );            
            if( refSupr != null ) {
                int Confirmar = JOptionPane.showConfirmDialog(this,
                        "Encontrada referencia para el correo electrónico ingresado.\n" +
                        "Desea eliminar la información?",
                        "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
                // Inicio control
                if( Confirmar == 0 ) {                    
                    boolean borrarDato = Controlador.BorrarGER(refSupr);
                    if( borrarDato ) {
                        this.LimpiarCamposRef();
                        JOptionPane.showMessageDialog(this,
                                "La información de la referencia fue eliminada",
                                "Eliminación referencia", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this,
                                "La información de la referencia NO fue eliminada",
                                "Fallo eliminación referencia", JOptionPane.WARNING_MESSAGE);
                    }                    
                }
                // Fin control
            } else {
                JOptionPane.showMessageDialog(this,
                        "No existe información para el correo electrónico ingresado",
                        "Eliminación referencia", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_BTNBorrarRefActionPerformed

    /**
     * Función Buscar (read) registro de la Referencia
     * @param evt Evento del botón Buscar
     */
    private void BTNBuscarRefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNBuscarRefActionPerformed
        String correo = TXTEmailRef.getText();
        if( correo.equals("") ) {
            JOptionPane.showMessageDialog(this,
                    "Por favor ingrese el correo electrónico de la referencia",
                    "Búsqueda referencia", JOptionPane.WARNING_MESSAGE);        
        } else if( correo.matches(".*@.*") == false ) {
            JOptionPane.showMessageDialog(this,
                    "El correo electrónico ingresado es invalido.\n" +
                    "Verifique que el correo tiene el formato usuario@dominio.",
                    "Campo de correo electrónico invalido", JOptionPane.WARNING_MESSAGE);
        } else {
            // Inicio control
            Referencia referencia = new Referencia();
            referencia = Referencia.class.cast( Controlador.BuscarGER(referencia, "", correo));
            // Fin control
            if( referencia != null ) {
                JOptionPane.showMessageDialog(this,
                        "Encontrada coincidencia para el correo electrónico ingresado",
                        "Búsqueda referencia", JOptionPane.INFORMATION_MESSAGE);
                TXTPrimNomRef.setText(referencia.getPersona_ref().getPrimernom());
                TXTSecNomRef.setText(referencia.getPersona_ref().getSegundonom());
                TXTPrimApellRef.setText(referencia.getPersona_ref().getPrimerapell());
                TXTSecApellRef.setText(referencia.getPersona_ref().getSegundoapell());
                TXTDireccionRef.setText(referencia.getPersona_ref().getDireccion());
                TXTCiudadRef.setText(referencia.getCiudad_ref().getNombre());
                CMBTipoTelRef.setSelectedItem(referencia.getContacto_ref().getTipotel());
                TXTNumTelRef.setText(referencia.getContacto_ref().getNumtel());
                TXTEmailRef.setText(referencia.getContacto_ref().getEmail());
                CMBTipRef.setSelectedItem(referencia.getTiporef_ref().getTiporef());
            } else {
                JOptionPane.showMessageDialog(this,
                        "No existe coincidencia con el correo electrónico ingresado",
                        "Búsqueda referencia", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_BTNBuscarRefActionPerformed

    /**
     * Función Actualizar (update) registro de la Referencia
     * @param evt Evento del botón Actualizar
     */
    private void BTNActualizarRefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNActualizarRefActionPerformed
        String correo = TXTEmailRef.getText();
        String PrimNomRef = TXTPrimNomRef.getText();
        String SecNomRef = TXTSecNomRef.getText();
        String PrimApellRef = TXTPrimApellRef.getText();
        String SecApellRef = TXTSecApellRef.getText();
        String DireccionRef = TXTDireccionRef.getText();
        String CiudadRef = TXTCiudadRef.getText();
        String TipoTelRef = CMBTipoTelRef.getSelectedItem().toString();
        String NumTelRef = TXTNumTelRef.getText();
        String TipRef = CMBTipRef.getSelectedItem().toString();
        // Verificar los campos llenos
        if( PrimNomRef.equals("") || SecNomRef.equals("") || PrimApellRef.equals("") || SecApellRef.equals("") ||
            DireccionRef.equals("") || CiudadRef.equals("") || NumTelRef.equals("") || correo.equals("") ){
            JOptionPane.showMessageDialog(this,
                                          "Todos los campos deben estar completos.\n" +
                                          "Primero realize la búsqueda con el correo electrónico.",
                                          "Actualización referencia", JOptionPane.WARNING_MESSAGE);
        } else if( correo.matches(".*@.*") == false ) {
            JOptionPane.showMessageDialog(this,
                                          "El correo electrónico ingresado es invalido.\n" +
                                          "Verifique que el correo tiene el formato usuario@dominio.",
                                          "Campo de correo electrónico invalido", JOptionPane.WARNING_MESSAGE);
        } else {
            // Actualizacion de referencia
            int Confirmar = JOptionPane.showConfirmDialog(this,
                    "Desea actualizar la información?",
                    "Confirmar actualización", JOptionPane.YES_NO_OPTION);
            if( Confirmar == 0 ) {
                Persona PersonaRefUpd = new Persona();
                PersonaRefUpd.setPrimernom(PrimNomRef);
                PersonaRefUpd.setSegundonom(SecNomRef);
                PersonaRefUpd.setPrimerapell(PrimApellRef);
                PersonaRefUpd.setSegundoapell(SecApellRef);
                PersonaRefUpd.setDireccion(DireccionRef);
                Ciudad CiudadRefUpd = new Ciudad();
                CiudadRefUpd.setNombre(CiudadRef);
                Contacto ContRefUpd = new Contacto();
                ContRefUpd.setTipotel(TipoTelRef);
                ContRefUpd.setNumtel(NumTelRef);
                ContRefUpd.setEmail(correo);
                TipoRef TipoRefUpd = new TipoRef();
                TipoRefUpd.setTiporef(TipRef);
                Referencia ReferenciaUpd = new Referencia();
                ReferenciaUpd.setPersona_ref(PersonaRefUpd);
                ReferenciaUpd.setCiudad_ref(CiudadRefUpd);
                ReferenciaUpd.setContacto_ref(ContRefUpd);
                ReferenciaUpd.setTiporef_ref(TipoRefUpd);
                // Inicio control
                boolean actualizarDato = Controlador.ActualizarGER(ReferenciaUpd);
                if( actualizarDato ) {
                    this.LimpiarCamposRef();
                    JOptionPane.showMessageDialog(this,
                            "El registro fue actualizado exitosamente",
                            "Actualización referencia", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this,
                            "El registro NO fue actualizado",
                            "Fallo actualización referencia", JOptionPane.WARNING_MESSAGE);
                }
                // Fin control
            }
        }
    }//GEN-LAST:event_BTNActualizarRefActionPerformed

    /**
     * Función Guardar (create) registro de la Referencia
     * @param evt Evento del botón Guardar
     */
    private void BTNGuardarRefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNGuardarRefActionPerformed
        String PrimNomRef = TXTPrimNomRef.getText();
        String SecNomRef = TXTSecNomRef.getText();
        String PrimApellRef = TXTPrimApellRef.getText();
        String SecApellRef = TXTSecApellRef.getText();
        String DireccionRef = TXTDireccionRef.getText();
        String CiudadRef = TXTCiudadRef.getText();
        String TipoTelRef = CMBTipoTelRef.getSelectedItem().toString();
        String NumTelRef = TXTNumTelRef.getText();
        String EmailRef = TXTEmailRef.getText();
        String TipRef = CMBTipRef.getSelectedItem().toString();
        Persona PersonaRefGUI = new Persona(PrimNomRef,SecNomRef,PrimApellRef,SecApellRef,DireccionRef);
        Ciudad CiudadRefGUI =new Ciudad(CiudadRef);
        Contacto ContRefGUI = new Contacto(TipoTelRef, NumTelRef, EmailRef);
        TipoRef TipoRefGUI = new TipoRef(TipRef);
        // Verificar campos llenos
        if( PrimNomRef.equals("") || SecNomRef.equals("") || PrimApellRef.equals("") || SecApellRef.equals("") ||
            DireccionRef.equals("") || CiudadRef.equals("") || NumTelRef.equals("") || EmailRef.equals("") ){
            JOptionPane.showMessageDialog(this,
                                          "Todos los campos deben estar completos",
                                          "Guardar referencia", JOptionPane.WARNING_MESSAGE);
        } else if( EmailRef.matches(".*@.*") == false ) {
            JOptionPane.showMessageDialog(this,
                                          "El correo electrónico ingresado es invalido.\n" +
                                          "Verifique que el correo tiene el formato usuario@dominio.",
                                          "Campo de correo electrónico invalido", JOptionPane.WARNING_MESSAGE);
        } else {
            Referencia ReferenciaGUI = new Referencia(PersonaRefGUI, CiudadRefGUI, ContRefGUI, TipoRefGUI);
            // Inicio control
            boolean crearDato = Controlador.CrearGER(ReferenciaGUI);
            if( crearDato ) {
                JOptionPane.showMessageDialog(this,
                        "El registro fue exitoso",
                        "Confirmación", JOptionPane.INFORMATION_MESSAGE);
            } else {
                    JOptionPane.showMessageDialog(this,
                        "El registro NO fue guardado",
                        "Confirmación", JOptionPane.WARNING_MESSAGE);
            }
            this.LimpiarCamposRef();
        }
    }//GEN-LAST:event_BTNGuardarRefActionPerformed

    private void TXTNumTelRefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTNumTelRefActionPerformed
        
    }//GEN-LAST:event_TXTNumTelRefActionPerformed

    private void TXTDireccionRefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTDireccionRefActionPerformed
        
    }//GEN-LAST:event_TXTDireccionRefActionPerformed

    private void TXTSecNomRefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTSecNomRefActionPerformed
        
    }//GEN-LAST:event_TXTSecNomRefActionPerformed

    private void TXTPrimNomRefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTPrimNomRefActionPerformed
        
    }//GEN-LAST:event_TXTPrimNomRefActionPerformed

    private void TXTCiudadRefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTCiudadRefActionPerformed
        
    }//GEN-LAST:event_TXTCiudadRefActionPerformed

    private void TXTGEREmpNumDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTGEREmpNumDocActionPerformed
        
    }//GEN-LAST:event_TXTGEREmpNumDocActionPerformed

    /**
     * Función Guardar (create) vínculo entre Empleado y Referencia
     * @param evt Evento del boton Vincular
     */
    private void BTNGERVincularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNGERVincularActionPerformed
        boolean existeEmpl = false;
        boolean existeRef = false;
        boolean existeVinc = false;
        String NumDocEmpl = TXTGEREmpNumDoc.getText();
        String EmailRef = TXTGERRefEmail.getText();
        // Verificar campos llenos y correcto
        if( NumDocEmpl.equals("") || EmailRef.equals("") ){
            JOptionPane.showMessageDialog(this,
                    "Todos los campos deben estar completos.\n" +
                            "Primero realize la búsqueda con el número de documento\n" +
                            "del empleado y correo electrónico de la referencia.",
                    "Búsqueda vinculación", JOptionPane.WARNING_MESSAGE);
        } else if( EmailRef.matches(".*@.*") == false ) {
            JOptionPane.showMessageDialog(this,
                    "El correo electrónico ingresado es invalido.\n" +
                            "Verifique que el correo tiene el formato usuario@dominio.",
                    "Campo de correo electrónico invalido", JOptionPane.WARNING_MESSAGE);
        } else {
            // Buscar empleado
            Empleado GEREmpleado = new Empleado();
            GEREmpleado = Empleado.class.cast( Controlador.BuscarGER(GEREmpleado, NumDocEmpl, "") );
            if( GEREmpleado != null ) {
                existeEmpl = true;
            }
            // Buscar referencia
            Referencia GERReferencia = new Referencia();
            GERReferencia = Referencia.class.cast( Controlador.BuscarGER(GERReferencia, "", EmailRef));
            if( GERReferencia != null ){
                existeRef = true;
            }
            // Buscar vinculo
            GestionEmpRef GERVinculo = new GestionEmpRef();
            GERVinculo = GestionEmpRef.class.cast( Controlador.BuscarGER(GERVinculo, NumDocEmpl, EmailRef));
            if( GERVinculo != null ) {
                existeVinc = true;
            }                        
            if( (existeEmpl == true) && (existeRef == true) ) {
                if( existeVinc == false ) {
                    int [] IDcero = {0, 0, 0};
                    GERVinculo = new GestionEmpRef(GEREmpleado, GERReferencia, GERReferencia.getTiporef_ref(), IDcero);
                    // Inicio control
                    boolean crearVinculo = Controlador.CrearGER(GERVinculo);
                    if( crearVinculo ) {
                        JOptionPane.showMessageDialog(this,
                        "La vinculación fue exitosa",
                        "Confirmación", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this,
                        "La vinculación NO fue guardada",
                        "Confirmación", JOptionPane.WARNING_MESSAGE);
                    }
                    this.LimpiarCamposGER();
                    TablaVinculoER(GERVinculo);
                    // Fin control
                } else {
                    JOptionPane.showMessageDialog(this,
                            "El empleado y la referencia YA están vinculados",
                            "Vinculación empleado y referencia", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this,
                        "La información ingresada no coinciden con un empleado o referencia\n" +
                                "almacenados. Realize una búsqueda por medio del botón \"Buscar\" en\n" +
                                "las respectivas pestañas de Empleado y Referencia.\"",
                        "Vinculación empleado y referencia", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_BTNGERVincularActionPerformed

    /**
     * Función Buscar (read) vínculo entre Empleado y Referencia
     * @param evt Evento para el botón Buscar
     */
    private void BTNGERBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNGERBuscarActionPerformed
        String NumDocEmpl = TXTGEREmpNumDoc.getText();
        String EmailRef = TXTGERRefEmail.getText();
        boolean existeEmpl = false;
        boolean existeRef = false;
        boolean existeVinc = false;
        // Verificar campos llenos y correctos
        if( NumDocEmpl.equals("") || EmailRef.equals("") ){
            JOptionPane.showMessageDialog(this,
                    "Todos los campos deben estar completos",
                    "Búsqueda vinculación", JOptionPane.WARNING_MESSAGE);            
        } else if( EmailRef.matches(".*@.*") == false ) {
            JOptionPane.showMessageDialog(this,
                    "El correo electrónico ingresado es invalido.\n" +
                            "Verifique que el correo tiene el formato usuario@dominio.",
                    "Campo de correo electrónico invalido", JOptionPane.WARNING_MESSAGE);
        } else {
            // Buscar empleado
            Empleado GEREmpleado = new Empleado();
            GEREmpleado = Empleado.class.cast( Controlador.BuscarGER(GEREmpleado, NumDocEmpl, "") );
            if( GEREmpleado != null ) {
                existeEmpl = true;
            }
            // Buscar referencia
            Referencia GERReferencia = new Referencia();
            GERReferencia = Referencia.class.cast( Controlador.BuscarGER(GERReferencia, "", EmailRef));
            if( GERReferencia != null ){
                existeRef = true;
            }
            // Buscar vinculo
            GestionEmpRef GERVinculo = new GestionEmpRef();
            GERVinculo = GestionEmpRef.class.cast( Controlador.BuscarGER(GERVinculo, NumDocEmpl, EmailRef));
            if( GERVinculo != null ) {
                existeVinc = true;
            }            
            siGER.setEnabled(false);
            noGER.setEnabled(false);
            // Empleado y Referencia existen
            if ( existeEmpl && existeRef ) {
                // Ya estan vinculados
                if( existeVinc ) {
                    siGER.setSelected(true);
                    noGER.setSelected(false);
                    TablaVinculoER(GERVinculo);
                    JOptionPane.showMessageDialog(this,
                            "El empleado y la referencia ingresados YA están vinculados",
                            "Búsqueda vinculación", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    siGER.setSelected(false);
                    noGER.setSelected(true);
                    JOptionPane.showMessageDialog(this,
                            "El empleado y la referencia ingresados NO están vinculados,\n" +
                                    "aunque ya están registrados en la base de datos.\n" +
                                    "Para vincular el registro pulse el botón:\n" +
                                    "\"Vincular Empleado y Referencia\"",
                            "Búsqueda vinculación", JOptionPane.INFORMATION_MESSAGE);
                }
            } else if( (existeEmpl == true) && (existeRef == false) ) {
                siGER.setSelected(false);
                noGER.setSelected(true);
                JOptionPane.showMessageDialog(this,
                        "Encontrada coincidencia para el empleado, pero NO para la referencia",
                        "Búsqueda vinculación", JOptionPane.INFORMATION_MESSAGE);
            } else if( (existeEmpl == false) && (existeRef == true) ) {
                siGER.setSelected(false);
                noGER.setSelected(true);
                JOptionPane.showMessageDialog(this,
                        "Encontrada coincidencia para la referencia, pero NO para el empleado",
                        "Búsqueda vinculación", JOptionPane.INFORMATION_MESSAGE);
            } else{
                siGER.setSelected(false);
                noGER.setSelected(true);
                JOptionPane.showMessageDialog(this,
                        "No existe coincidencia con el número de documento del empleado\n" +
                                "y correo electrónico de la referencia ingresados",
                        "Búsqueda vinculación", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_BTNGERBuscarActionPerformed

    private void siGERActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siGERActionPerformed

    }//GEN-LAST:event_siGERActionPerformed

    private void BTNGERLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNGERLimpiarActionPerformed
        this.LimpiarCamposGER();
    }//GEN-LAST:event_BTNGERLimpiarActionPerformed

    private void BTNGEREliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNGEREliminarActionPerformed
        String NumDocEmpl = TXTGEREmpNumDoc.getText();
        String EmailRef = TXTGERRefEmail.getText();        
        // Verificar campos llenos y correctos
        if( NumDocEmpl.equals("") || EmailRef.equals("") ){
            JOptionPane.showMessageDialog(this,
                    "Todos los campos deben estar completos. Primero realize la búsqueda con el\n" +
                            "número de documento del empleado y el correo electrónico de la referencia",
                    "Eliminación de la vinculación", JOptionPane.WARNING_MESSAGE);            
        } else if( EmailRef.matches(".*@.*") == false ) {
            JOptionPane.showMessageDialog(this,
                    "El correo electrónico ingresado es invalido.\n" +
                            "Verifique que el correo tiene el formato usuario@dominio.",
                    "Campo de correo electrónico invalido", JOptionPane.WARNING_MESSAGE);
        } else {
            GestionEmpRef vincSupr = new GestionEmpRef();
            vincSupr = GestionEmpRef.class.cast( Controlador.BuscarGER(vincSupr, NumDocEmpl, EmailRef) );
            if( vincSupr != null ) {
                int Confirmar = JOptionPane.showConfirmDialog(this,                        
                        "Encontrada vinculación para el empleado y la referencia ingresados.\n" +
                                "Eliminar la vinculación solamente removera la información del vínculo,\n" +
                                "pero no la información del empleado y la referencia.\n"  +
                                "Desea eliminar la vinculación?",
                        "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
                if( Confirmar == 0 ) {
                    // Inicio control
                    boolean borrarVinculo = Controlador.BorrarGER(vincSupr);
                    if( borrarVinculo ) {
                        this.LimpiarCamposGER();
                        JOptionPane.showMessageDialog(this,
                                "La vinculación fue eliminada",
                                "Eliminación de la vinculación", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this,
                                "La vinculación NO fue eliminada",
                                "Fallo eliminación de la vinculación", JOptionPane.WARNING_MESSAGE);
                    }
                    // Fin control
                }            
            } else {
                JOptionPane.showMessageDialog(this,
                        "No existe información de vinculación entre el empleado y la referencia ingresados",
                        "Eliminación de la vinculación", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_BTNGEREliminarActionPerformed

    /**
     * Función para limpiar todos los campos de texto del Empleado
     */
    private void LimpiarCamposEmpl() {
        // Limpiar todos los campos
        TXTPrimNomEmpl.setText("");
        TXTSecNomEmpl.setText("");
        TXTPrimApellEmpl.setText("");
        TXTSecApellEmpl.setText("");
        TXTDireccionEmpl.setText("");
        TXTCiudadEmpl.setText("");
        TXTFechaNac.setText("");
        CMBTipoDoc.setSelectedIndex(0);
        TXTNumDoc.setText("");
        CMBEstCivil.setSelectedIndex(0);
        CMBSexo.setSelectedIndex(0);
        CMBTipoTelEmpl.setSelectedIndex(0);
        TXTNumTelEmpl.setText("");
        TXTEmailEmpl.setText("");
        TXTNomEmpresa.setText("");
        TXTNITEmpr.setText("");
        TXTCiudadEmpr.setText("");   
    }
    
    /**
     * Función para limpiar todos los campos de texto de la Referencia
     */
    private void LimpiarCamposRef() {
        TXTPrimNomRef.setText("");
        TXTSecNomRef.setText("");
        TXTPrimApellRef.setText("");
        TXTSecApellRef.setText("");
        TXTDireccionRef.setText("");
        TXTCiudadRef.setText("");
        CMBTipoTelRef.setSelectedIndex(0);
        TXTNumTelRef.setText("");
        TXTEmailRef.setText("");
        CMBTipRef.setSelectedIndex(0);
    }
    
    /**
     * Función para limpiar todos los campos de texto de la vinculación
     * entre Emplado y Referencia
     */
    private void LimpiarCamposGER() {
        TXTGEREmpNumDoc.setText("");
        TXTGERRefEmail.setText("");
        siGER.setSelected(false);
        noGER.setSelected(false);
        // Limpiar tabla
        Object VinculacionTitCol [] = {"Dato", "Valor"};
        Object [][] VinculacionData ={
            {"", "" },
            {"", "" },
            {"", "" },
            {"", "" },
            {"", "" },
            {"", "" },
            {"", "" }
        };
        VinculacionTM.setDataVector(VinculacionData, VinculacionTitCol);
        TBLVinculacion.setModel(VinculacionTM);
    }
    
    /**
     * Función para mostrar una tabla con informacion del vínculo entre
     * Empleado y Referencia
     * @param vinculo Objeto GestionEmpRef con registro de la vinculación
     */
    private void TablaVinculoER(GestionEmpRef vinculo) {
        // Info (tabla) de la vinculacion
        Object VinculacionTitCol [] = {"Dato", "Valor"};
        Object [][] VinculacionData ={
            {"No. consecutivo vinculación", vinculo.ImpIDVinculo(2) },
            {"Nombre empleado", vinculo.getTrabajador().NombreCompletoEmpl() },
            {"Número documento", vinculo.getTrabajador().getDni_emp().getNumident() },
            {"Empresa", vinculo.getTrabajador().getEmpresa_emp().getNomempr() },
            {"Nombre referencia", vinculo.getRecomendador().NombreCompletoRef() },
            {"Correo electrónico", vinculo.getRecomendador().getContacto_ref().getEmail() },
            {"Tipo referencia", vinculo.getRecomendador().getTiporef_ref().getTiporef() }
        };
        VinculacionTM.setDataVector(VinculacionData, VinculacionTitCol);
        TBLVinculacion.setModel(VinculacionTM);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormularioMVC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormularioMVC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormularioMVC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormularioMVC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormularioMVC().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTNActualizarEmpl;
    private javax.swing.JButton BTNActualizarRef;
    private javax.swing.JButton BTNBorrarEmpl;
    private javax.swing.JButton BTNBorrarRef;
    private javax.swing.JButton BTNBuscarEmpl;
    private javax.swing.JButton BTNBuscarRef;
    private javax.swing.JButton BTNGERBuscar;
    private javax.swing.JButton BTNGEREliminar;
    private javax.swing.JButton BTNGERLimpiar;
    private javax.swing.JButton BTNGERVincular;
    private javax.swing.JButton BTNGuardarEmpl;
    private javax.swing.JButton BTNGuardarRef;
    private javax.swing.JButton BTNLimpiarEmpl;
    private javax.swing.JButton BTNLimpiarRef;
    private javax.swing.JComboBox<String> CMBEstCivil;
    private javax.swing.JComboBox<String> CMBSexo;
    private javax.swing.JComboBox<String> CMBTipRef;
    private javax.swing.JComboBox<String> CMBTipoDoc;
    private javax.swing.JComboBox<String> CMBTipoTelEmpl;
    private javax.swing.JComboBox<String> CMBTipoTelRef;
    private javax.swing.JTable TBLVinculacion;
    private javax.swing.JTextField TXTCiudadEmpl;
    private javax.swing.JTextField TXTCiudadEmpr;
    private javax.swing.JTextField TXTCiudadRef;
    private javax.swing.JTextField TXTDireccionEmpl;
    private javax.swing.JTextField TXTDireccionRef;
    private javax.swing.JTextField TXTEmailEmpl;
    private javax.swing.JTextField TXTEmailRef;
    private javax.swing.JTextField TXTFechaNac;
    private javax.swing.JTextField TXTGEREmpNumDoc;
    private javax.swing.JTextField TXTGERRefEmail;
    private javax.swing.JTextField TXTNITEmpr;
    private javax.swing.JTextField TXTNomEmpresa;
    private javax.swing.JTextField TXTNumDoc;
    private javax.swing.JTextField TXTNumTelEmpl;
    private javax.swing.JTextField TXTNumTelRef;
    private javax.swing.JTextField TXTPrimApellEmpl;
    private javax.swing.JTextField TXTPrimApellRef;
    private javax.swing.JTextField TXTPrimNomEmpl;
    private javax.swing.JTextField TXTPrimNomRef;
    private javax.swing.JTextField TXTSecApellEmpl;
    private javax.swing.JTextField TXTSecApellRef;
    private javax.swing.JTextField TXTSecNomEmpl;
    private javax.swing.JTextField TXTSecNomRef;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JCheckBox noGER;
    private javax.swing.JCheckBox siGER;
    // End of variables declaration//GEN-END:variables
}
